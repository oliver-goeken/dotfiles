set nocompatible

filetype on

filetype plugin on

filetype indent on

syntax on

set shiftwidth=4

set tabstop=4

set linebreak

set wildmenu

set incsearch

set hlsearch

set ignorecase

set smartcase

set showcmd

set showmode

set showmatch

set history=1000

set whichwrap+=<,>,[,]

set title

set shell=zsh

set hidden


" Let's save undo info! --> https://vi.stackexchange.com/a/53
if !isdirectory($HOME."/.vim")
	call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/undo-dir")
	call mkdir($HOME."/.vim/undo-dir", "", 0700)
endif
set undodir=~/.vim/undo-dir
set undofile


" AUTOCOMMANDS"
"augroup MyYCMCustom
"  autocmd!
"  autocmd FileType c,cpp let b:ycm_hover = {
"    \ 'command': 'GetHover',
"    \ 'syntax': &filetype
"    \ }
"augroupEND
autocmd BufEnter * silent! lcd %:p:h
autocmd TerminalWinOpen * set nobuflisted


" CONDITIONAL RELATIVE LINE NUMBER "
set nu
hi LineNr ctermfg=30

function! RnuOn()
	set rnu
	hi LineNr ctermfg=30
endfunction
function! RnuOff()
	set nornu
	hi LineNr ctermfg=179
endfunction

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | call RnuOn() | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu | call RnuOff() | endif
augroup END

hi LineNrAbove ctermfg=179
hi LineNrBelow ctermfg=179


" Return to last edit position when opening files (You want this!) "
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
	 \ endif


" SHORTCUTS "
let mapleader = " "
nnoremap <Space> <Nop>

nnoremap <Leader>n :NERDTreeToggle<CR>
nnoremap <Leader>m :NERDTreeFocus<CR>
nnoremap <Leader>p :YcmCompleter GoTo<CR>
nnoremap <Leader>u :YcmCompleter GoToAlternateFile<CR>
nnoremap <Leader>i :tabn<CR>
nmap <Leader>o <C-o>

nnoremap <Leader>c :set cursorline!<CR>
nmap <Leader>e <C-e>ee
nmap <Leader>d <plug>(YCMHover)

inoremap fj <Esc>l
inoremap jf <Esc>l
inoremap /* /*   */<Esc>hhhi

nmap <leader>h <Plug>vem_move_buffer_left-
nmap <leader>l <Plug>vem_move_buffer_right-
nmap <tab> <Plug>vem_next_buffer-
nmap <S-tab> <Plug>vem_prev_buffer-
nmap <leader>w <Plug>vem_delete_buffer-
nnoremap <leader>t :enew<CR>

nnoremap <C-s> :w<CR>

nnoremap <Leader>x :below terminal ++rows=7<CR>
nnoremap <Leader><tab> <C-w>j
tnoremap <Leader><tab> <C-w>w
tnoremap <Leader><s-tab> <C-w>W


" PLUGINS "
let data_dir = '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
	silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
	autocmd VimEnter * silent! PlugInstall --sync | silent! source $MYVIMRC
	autocmd VimEnter * silent! ! python3 ~/.vim/plugged/YouCompleteMe/install.py --all
	autocmd VimEnter * quitall
endif

call plug#begin()
Plug 'scrooloose/nerdtree'
Plug 'romainl/vim-cool'
Plug 'ycm-core/YouCompleteMe'
Plug 'tpope/vim-fugitive'
Plug 'simeji/winresizer'
Plug 'drzel/vim-scrolloff-fraction'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'pacha/vem-tabline'
Plug 'mhinz/vim-startify', {'branch': 'center'}
call plug#end()

let dotfiledir = readfile(glob("~/.dotfiledir"), '', 1)[0] 
let plugin_loc = dotfiledir . '/plugins/vim/*.vim'
for f in split(glob(plugin_loc), '\n')
	exe 'source' f
endfor


let MY_YCM_HIGHLIGHT_GROUP = {
	\ 'parameter': 'WarningMsg',
	\ 'field': 'Comment',
	\ 'variable': 'Special',
	\ }

for tokenType in keys(MY_YCM_HIGHLIGHT_GROUP)
	call prop_type_add( 'YCM_HL_' . tokenType, 
					  \ {'highlight': MY_YCM_HIGHLIGHT_GROUP[ tokenType ] } )
endfor

let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_enable_semantic_highlighting=1
let g:scrolloff_fraction = 0.30
let g:vimwiki_list = [{'path': '~/.vim/wiki'}]

let g:vem_tabline_show = 2
let g:vem_tabline_multiwindow_mode = 1

let g:NERDTreeChDirMode = 2

let g:startify_center = 60

highlight vimwikiHeader1 ctermfg=1
highlight vimwikiHeader2 ctermfg=2
highlight vimwikiHeader3 ctermfg=3


" STATUS LINE "
function! Current_git_branch()
    let l:branch = split(fugitive#statusline(),'[()]')
    if len(l:branch) > 1
        return join([" ", remove(l:branch, 1), ""])
    endif
    return ""
endfunction

set laststatus=2


if !empty(glob("~/.vim/plugged/vim-fugitive/plugin/fugitive.vim"))
	set statusline=%#StatusLineTermNC#
	set statusline+=%{Current_git_branch()}
endif

set statusline+=%#Visual#
set statusline+=\ %f
set statusline+=\ %m

set statusline+=%=
set statusline+=%y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=[%{&fileformat}]\ 
set statusline+=%#PmenuSbar#
set statusline+=\ %p%%\ 
set statusline+=%#StatusLineNC#
set statusline+=\ %3l:%-2v\ 
set statusline+=%0*
